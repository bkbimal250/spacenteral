# Generated by Django 5.2.7 on 2025-10-10 06:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('location', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PrimaryOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'primary_owners',
                'ordering': ['fullname'],
            },
        ),
        migrations.CreateModel(
            name='SecondaryOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'secondary_owners',
                'ordering': ['fullname'],
            },
        ),
        migrations.CreateModel(
            name='Spa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spa_code', models.CharField(max_length=50, unique=True)),
                ('spa_name', models.CharField(max_length=200)),
                ('spamanager', models.CharField(blank=True, max_length=200, null=True)),
                ('opening_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Closed', 'Closed'), ('Temporarily Closed', 'Temporarily Closed'), ('Processing', 'Processing')], default='Open', max_length=30)),
                ('line_track', models.CharField(blank=True, max_length=100, null=True)),
                ('landmark', models.CharField(blank=True, max_length=200, null=True)),
                ('emails', models.TextField(blank=True, help_text='Comma-separated list of emails', null=True)),
                ('phones', models.TextField(blank=True, help_text='Comma-separated list of phone numbers', null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('google_map_link', models.TextField(blank=True, help_text='Google Maps link for spa location (supports long embed URLs)', null=True)),
                ('agreement_status', models.CharField(choices=[('done', 'Done'), ('pending', 'Pending')], default='pending', max_length=50)),
                ('remark', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('area', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spas', to='location.area')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spas_created', to=settings.AUTH_USER_MODEL)),
                ('primary_owner', models.ForeignKey(help_text='Primary Owner (required for spa creation)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spas', to='spas.primaryowner')),
                ('secondary_owner', models.ForeignKey(blank=True, help_text='Secondary Owner (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spas', to='spas.secondaryowner')),
            ],
            options={
                'db_table': 'spas',
                'ordering': ['spa_name'],
                'indexes': [models.Index(fields=['spa_code'], name='idx_spa_code'), models.Index(fields=['status'], name='idx_spa_status'), models.Index(fields=['spa_name'], name='idx_spa_name')],
            },
        ),
    ]
